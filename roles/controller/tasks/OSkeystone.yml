- name: creating keystone database
  mysql_db:
    name: keystone
    login_user: root
    login_password: vagrant
    state: present

- name: set privileges keystone
  mysql_user:
    append_privs: yes
    login_user: root
    login_password: vagrant
    user: keystone
    password: vagrant
    priv: 'keystone.*:ALL'
    host: "{{ item }}"
    state: present
  with_items:
    - localhost
    - '%'

- name: Installing packages that keystone needs
  yum:
    name: "{{ item }}"
  with_items:
    - openstack-keystone
    - httpd
    - mod_wsgi

- name: Keystone configuration file (PASSWORD vagrant)
  template:
    src: keystone_configuration.j2
    dest: /etc/keystone/keystone.conf

##########################################################
# CAREFUL: SHELL COMMANDS HERE
- name: populate Identity service databse
  shell: su -s /bin/sh -c "keystone-manage db_sync" keystone

- name: Initialize fernet repositories
  shell: keystone-manage "{{ item }}" --keystone-user keystone --keystone-group keystone
  with_items:
    - fernet_setup
    - credential_setup

- name: Bootstrap Identity service (CAREFUL PASSWORD)
  command: keystone-manage bootstrap --bootstrap-password vagrant --bootstrap-admin-url http://controller:5000/v3/ --bootstrap-internal-url http://controller:5000/v3/ --bootstrap-public-url http://controller:5000/v3/  --bootstrap-region-id RegionOne
##########################################################

- name: Configure Apache HTTP server (controller)
  template:
    src: apache_config.j2
    dest: /etc/httpd/conf/httpd.conf

- name: Creating link to wsgi-keystone.conf file
  file:
    src: /usr/share/keystone/wsgi-keystone.conf
    dest: /etc/httpd/conf.d/wsgi-keystone.conf
    state: link

- name: Start Apache HTTP service
  service:
    name: httpd
    state: started

- name: Profile file with environmental variables (NEEDS TO BE SOURCED)
  template:
    src: profile.j2
    dest: /etc/profile

- name: Sourcing Profile
  shell: source /etc/profile
  args:
    executable: /bin/bash
- name: (OPTIONAL) admin-openrc file (admin project env script)
  template:
    src: admin-openrc.j2
    dest: /home/admin-openrc

- name: (OPTIONAL) demo-openrc file (demo project env script)
  template:
    src: demo-openrc.j2
    dest: /home/demo-openrc
- name: check if service project exists
  shell: source /home/admin-openrc && openstack project show service
  register: result_service_p
  no_log: True
  ignore_errors: True
- name: check if demo project exists [Ignore all errors]
  shell: source /home/admin-openrc && openstack project show demo
  register: result_demo_p
  no_log: True
  ignore_errors: True
- name: check if user role exists
  shell: source /home/admin-openrc && openstack role show user
  register: user_role_exists
  no_log: True
  ignore_errors: True
- name: create demo and service os oprojects
  shell: source /home/admin-openrc && openstack project create --domain default  --description \""{{item.name}}"\" "{{item.tag}}"
  with_items:
  -  {name: "Service Project",tag: "service"}
  -  {name: "Demo Project",tag: "demo"}
  when: (result_service_p is failed) and (result_demo_p is failed)

- name: create user in demo Project
  shell: source /home/admin-openrc && openstack user create --domain default --password user demo
  when: (result_demo_p is failed)

- name : create user role
  shell: source /home/admin-openrc && openstack role create user
  when: user_role_exists is failed

- name : create user role in demo project
  shell: source /home/admin-openrc && openstack role add --project demo --user demo user
  when: result_demo_p is failed

#prereqs
- name: creating nova and nova_api database
  mysql_db:
    name: '{{ item }}'
    login_user: root
    login_password: "{{ mysql_password }}"
    state: present
  with_items:
        - nova
        - nova_api
        - nova_cell0

- name: set privileges for nova and nova_api
  mysql_user:
    append_privs: yes
    login_user: root
    login_password: "{{ mysql_password }}"
    user: nova
    password: "{{ nova_password }}"
    priv: '{{ item.database }}.*:ALL'
    host: "{{ item.host }}"
    state: present
  with_items:
    - {host: localhost, database: nova }
    - {host: '%', database: nova }
    - {host: 'localhost', database: nova_api }
    - {host: '%', database: nova_api }
    - {host: 'localhost', database: nova_cell0 }
    - {host: '%', database: nova_cell0 }



- name: check if user nova exists
  shell: " source /home/admin-openrc && openstack user show nova"
  register: u_nova_result
  ignore_errors: True
  no_log: True
- name: check if user placement exists
  shell: " source /home/admin-openrc && openstack user show nova"
  register: u_placement_result
  ignore_errors: True
  no_log: True
- name: check if compute service exists
  shell: source /home/admin-openrc && openstack service show compute
  register: compute_service_exists
  no_log: True
  ignore_errors: True
- name: check if placement service exists
  shell: source /home/admin-openrc && openstack service show placement
  register: placement_service_exists
  no_log: True
  ignore_errors: True

- name: create nova user
  shell: "source /home/admin-openrc && openstack user create --domain default --password {{ nova_password }} nova"
  when: u_nova_result is failed

- name: add admin role to nova user
  shell: "source /home/admin-openrc && openstack role add --project service --user nova admin" #--description \"OpenStack Compute\" compute"
  when: u_nova_result is failed

- name: create nova service entity
  shell: "source /home/admin-openrc && openstack service create --name nova --description \"OpenStack Compute\" compute"
  when: compute_service_exists is failed

- name: create nova service API endpoints
  shell: 'source /home/admin-openrc &&  openstack endpoint create --region RegionOne compute {{ item }} http://{{ controller_ip }}:8774/v2.1'
  with_items:
    - public
    - internal
    - admin

- name: create placement user
  shell: " source /home/admin-openrc && openstack user create --domain default --password {{ placement_password }} placement"
  when: u_placement_result is failed

- name: add admin role to placement user
  shell: " source /home/admin-openrc && openstack role add --project service --user placement admin"
  when: u_placement_result is failed

- name: create placement service entity
  shell: "source /home/admin-openrc && openstack service create --name placement --description \"Placement API\" placement"
  when: placement_service_exists is failed

- name: create placement service API endpoints
  shell: 'source /home/admin-openrc &&  openstack endpoint create --region RegionOne placement {{ item }} http://{{ controller_ip }}:8778'
  with_items:
    - public
    - internal
    - admin
##################################
# installation
- name: install nova
  yum:
   name: "{{ item }}"
   state: present
  with_items:
    - openstack-nova-api
    - openstack-nova-conductor
    - openstack-nova-console
    - openstack-nova-novncproxy
    - openstack-nova-scheduler
    - openstack-nova-placement-api

- name:  copy nova.conf
  template:
   src: nova.conf.j2
   dest: /etc/nova/nova.conf

- name: copy 00-nova-placement-api.conf
  template:
   src: 00-nova-placement-api.conf.j2
   dest: /etc/httpd/conf.d/00-nova-placement-api.conf
  register: nova_api_conf_changed

- name: restart http
  service:
   name: httpd
   state: restarted
  when: nova_api_conf_changed.changed

- name: populate nova-api database
  shell: nova-manage api_db sync
  become: true
  become_user: nova

- name: register cell0
  shell: nova-manage cell_v2 map_cell0
  become: true
  become_user: nova

- name: create cell1 (THIS IS UGLY)
  shell: nova-manage cell_v2 create_cell --name=cell1 --verbose
  become: true
  become_user: nova
  ignore_errors: true

- name: populate database
  shell: nova-manage db sync
  become: true
  become_user: nova

- name: verify cells
  shell: nova-manage cell_v2 list_cells

- name: Restart firewalls
  service:
    name: firewalld
    state: restarted

- name: Open 5672 port
  shell: "firewall-cmd {{ item }}"
  with_items:
    - --zone=public --permanent --add-port=5672/tcp
    - --reload

- name: Open 8774 port
  shell: "firewall-cmd {{ item }}"
  with_items:
    - --zone=public --permanent --add-port=8774/tcp
    - --reload

- name: Open 80 port
  shell: "firewall-cmd {{ item }}"
  with_items:
    - --zone=public --permanent --add-port=80/tcp
    - --reload

- name: restart services
  shell: "systemctl restart {{ item }}.service"
  with_items:
    - openstack-nova-api
    - openstack-nova-console
    - openstack-nova-scheduler
    - openstack-nova-conductor
    - openstack-nova-novncproxy
    #- openstack-nova-placement-api
